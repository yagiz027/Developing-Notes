Microservice nedir ? 
	Adından da anlaşılacağı gibi,microserviceler temelde bir yazılım uygulamasında belirli özellik yada fonksiyonu sağlayan, tek bir amaca hizmet eden, birbirinden bağımsız yazılım servislerdir. 

	Bir diğer tanım olarak ise tek başına sorumluluğu olan ve tek iş yapan sadece o işe ait işleri yürüten modüler projelerdir.

	Microserviceler'in kullanılmasının sebepleri: 
		1) Scalibilty (Ölçeklenebilirlik)
		2) Flexiblity (Esneklik)
		3) CI (Continuous Integration)
		4) CD (Continuous Delivery)
		5) Teknoloji Çeşitliliği

	Scalibilty (Ölçeklenebilirlik) nedir türleri nelerdir?
		Ölçeklenebilir kelimesi, bir sistemin veya yapının, mevcut koşullara uygun olarak büyütülebilir ve küçültülebilir olması anlamına gelir. 

		İki tip ölçekleme vardır:
			- Horizontal Scalibilty (Yatayda Ölçekleme)
			- Vertical Scalibilty	(Dikeyde Ölçekleme)

			Horizontal Scalibilty:
				- Uygulamayı çalıştıran sanal veya fiziksel makine sayısının arttırılması işlemine yatayda ölçekleme denir. 

			Vertical Scalibilty:  
				- Uygulamamızın üzerinde çalıştığı server'a daha fazla kaynak ekleme (cpu,ram,disk vb..) işlemine dikeyde ölçekleme denir.

		Microservice'ler ise ölçeklenebilmeyi otomatik bir hale getirmektedir. Örneğin bir sayfanızın olduğunu ve microservice içerisindeki bir service'nizin kullanıcılardan gelen dakikada 1000 request'e cevap verebildiğini varsayalım.
		Bu durumda dakikada gelen istek sayısı 1000 request'i aştığında, microservice mimarisi sayesinde ilgili service'in Kubarnates, Docker,	 Rancher gibi teknolojiler kullanarak sanalda bir instance'ı oluşturulur. 
		Böylece uygulamanın dakika da cevap verebildiği request sayısı arttırılarak ölçeklenebilirlik kapsamında bize avantaj sağlar.

	Flexiblity (Esneklik) nedir?
		Yazılım anlamında esneklik kullanım alanlarına göre birden çok manaya gelebilmektedir. Ancak bir sistemin bütün olarak esnekliği denildiğinde, o sistemin gelecekteki ve şimdiki ihtiyaçları karşılayabilme kabiliyeti olarak tanımlayabiliriz.

		Örneğin geliştirime sırasında kod'da karşılaşılan bir hata sonucunda uygulamanızın fonksiyonlarından biri çalışamaz hale geldi. 
		Böyle bir durumda tüm uygulamanın hata vererek çalışamaz hale gelmesi sizin flexiblity anlamında negatif bir yaklaşım izlediğinizi gösterir. 
		Microservice mimarisi sayesinde ise hata olan ilgili kodun veya method'un çalışamaz duruma gelmesi halinde bütün projedeki yalnızca tek bir service
		çalışamaz duruma gelmektedir. Bu durumda ise kullanıcıların uygulamayı kullanmaya devam etmesinin önüne herhangi bir engel çıkmamış olur. 

	CI/CD Nedir ?
  		 CI/CD uygulama geliştirme aşamalarına otomasyonu dahil ederek uygulamarı müşterilere sıklıkla sunmaya yönelik bir yöntemdir.
		
		 CI/CD'ye atfedilen ana kavramlar Continuous Integration (sürekli entegrasyon), Continuous Delivery (sürekli teslimat) ve Continuous Deployment (sürekli dağıtım)'dır.
		Başarılı bir CI, bir uygulamada yapılan yeni kod değişikliklerinin düzenli olarak oluşturulduğu, test edildiği ve ortak bir repo'da birleştirildiği (merge) anlamına gelir.
		Bu gelişmekte olan bir uygulamanın birbiriyle çatışabilecek (Conflict) çok sayıda dalının aynı anda bulunmaması sorununa ir çözümdür.

		 CD (Continuous Delivery) ise genellikle geliştiricinin bir uygulamada yaptığı değişikliklerin otomatik olarak hata testine tabi tutulduğu ve bir repository'e 
		(GitHub veya konteyner kayıt defteri gibi) yüklendiği ve burada operasyon ekibi tarafından canlı bir üretim ortamına dağıtılabileceği anlamına gelir.
		Bu developer ve iş ekipleri arasındaki poor visibilty (görme zorluğu) ve iletişim sorununa bir çözüm sağlar. Yani kısacası Continuous Delivery'nin genel olarak
		amacı geliştirmiş olan yeni kodun deploy edilmesi için harcanan çabayı minimum'a indirgemektir. 

		 Continuous Deployment ise developer'ın yaptığı değişikliklerin ve geliştirdiği yeni özelliklerin repository'den müşterilerin kullanabileceği production'a (üretime) 
		otomatik olarak yayınlanması anlamına gelmektedir. Uygulamanın deploy edilme sürecini yavaşlatan manuel işlemlerle operasyon ekiplerinin overloading (aşırı yüklenme)
		sorununu gidererek, pipeline üzerindeki henüz deploy edilmemiş yeni özellikleri otomatik olarak deploy ederek müşterilerin kullanımına sunar. 

	Microservice Mimarisinin CI/CD Süreçlerine katkısı:
		Her bir service kendisiyle ilgili olan bir domain problemine odaklı olarak geliştirildiği için bir service'de hata olduğunda diğer service'ler bundan etkilenmeden çalışmaya devam edebiliyor.
		Bir bug tespit edildiğinde tüm yapıyı yeniden yayınlamaya gerek kalmadan sadece ilgili service'in yayınlanması mümkün olabiliyor.
		Microservice mimarisi sayesinde her service'in farklı bir codebase yapısı ve ekiplerinin olması developer'lar açısından daha rahat bir geliştirme ortamı sağlıyor. Böylece developer'lar açısıından
		okunabilirlik ve müdahalesi daha kolay sistemler ortaya çıkmış oluyor. Bu da yazılım ekibinin üzerindeki operasyonel iş yükünü hafiflettiği için yazılım süreçleri daha hızlı bir şekilde ilerleyebiliyor.

	Teknoloji Çeşitliliği:
		Büyük çaplı uygulamalar geliştirirken karşımıza çıkan farklı sorunları birden fazla teknoloji altyapısıyla veya farklı yazılım dilleriyle çözmemiz gerekebilir.
		Örneğin java'da karışmıza çıkan bir sorunun çözümünün, python ile yapıldığında daha kolay ve daha optimize olması durumunda python ile ilgili eklentileri ve teknolojik 
		altyapıları projemize eklememiz gerekebilir. Monolit uygulamar bir bütün olarak ele alındığı için bu tip çeşitliliklerin sayısı arttığı zaman proje çok karmaşık bir hal alabilir. 
		Ancak microservice mimarisi sayesinde birbirinden bağımsız olarak geliştirilen service'ler sayesinde ilgili sorun gerektiğinde farklı teknolojiler kullanılarak çözülüp deploy edilebilir.