SOLID Yazılım prensipleri=>
	Her yazılımcının bilmesi gereken S.O.L.I.D. yazılım geliştirmenin temel prensipleri olarak kabul edilmektedir.
	SOLID yazılım prensipleri; geliştirilen yazılımın esnek, yeniden kullanılabilir, sürdürülebilir ve anlaşılır olmasını sağlayan, kod tekrarını önleyen ve Robert C. Martin tarafından öne sürülen prensipler bütünüdür.

Amaçları:
	Gelitirilen yazılımın gelecekteki gereksinimlere kolayca adapte olması
	Yeni özellikleri kodda bir değişikliğe gerek kalmadan kolayca ekleyebilceğimiz. 
	Yeni gereksinimlere karşı kodun üzerinde en az değişimi sağlaması.
	Kod üzerinde sürekli düzeltme hatta yeniden yazma gibi sorunların yol açtığı zaman kaybını minimum a indirgemektir. 

SOLID AÇILIMI:
	1) Single Responsibility Priciple
	2) Open/Closed Principle
	3) Liskov substitution principle
	4) Interface segregation principle
	5) Dependency Inversion principle

	
    1)Single Responsibility Principle=> (User ve Adress Örneği)
	Tek işi tek sorumlulukta yapma sanatı olarak özetlenebilir. Bir sınıf (nesne) yalnızca tek bir amaç uğruna değiştirlebilir, o 	amaçta o sınıfa yüklenen 	sorumluluktur. Yani bir sınıfın yapması gereken yalnızca bir işi olması gerekir. Bir sınıf ne kadar fazla sorumluluk alırsa, o kadar 	 	fazla değişime 	uğramak zorunda kalır. Yani bir sınıfa (nesneye) atanan sorumlulluklar arttıkça kod içerisinde yapılan değişiklerin sonucu olarak bu sınfın da bir 	kısmının veya tamamının değişmesi gerekebilir. 
	Bundan dolayı bir sınıfı veya methodu geliştirdiğimizde sorumluluğunu ya da amacını iyi belirleyip, sınıfı ona göre tasarlamanız gerekir. böylece oluşabilecek 	herhangi bir değişimden olabildiğince az şeyi güncelleyerek ve düzelterek istenilen geliştirmeyi gerçekleştirmiş oluruz. Yani "Sorumluğun azaltılması demek 	değişime daha klay adapte olabilmek anlamına gelmektedir.
	
    2)Open/Closed Principle=> (Alan Hesaplama Örneği)
	Bir sınıf ya da method var olan özelliklerini korumalı, yani davranışını değiştirmiyor olamalı ve yeni özellikler kazanabilmelidir. 
	Sınıflar / methodlar değişime kapalı ancak yeni davranışların eklenmesine açık olmalıdır. 
	Bu prensip sürdürülebilir ve tekrar kullanılabilir kod yazmanın temelini oluşturur.

	Open=> Sınıf için yeni davranışlar eklenebilmesini temsil eder. 
	Closed=> Var olan davranışların değişiminin mümkün olamamasını temsil eder.

    3)Liskov substitution principle=> (Kare-Dikdörtgen Örneği)
	Kodlarımızla herhangi bir değişiklik yapmaya gerek kalmadan, alt sınıfları türedikleri üst sınıfların yerine kullanabilmeliyiz.
	Türeyen sınıf yani alt sınıflar ana(üst) sınıfın tüm özelliklerini ve metotlarını aynı işlevi gösterecek şekilde kullanabilmeli ve kendine ait yeni özellikler 	barındırabilmelidir.
	"Alt seviye sınıflardan oluşan nesnelerin/sınıfların, ana(üst) sınıfın nesneleri ile yer değiştirdikleri zaman, aynı davranışı sergilemesi gerekmektedir. 	Türetilen sınıflar, türeyen sınıfların tüm özelliklerini kullanabilmelidir."

	NOT:Liskov Substitution Principle MIT programlama metodolojileri grup liderliği yapan Barbara Liskov tarafından öne sürülmüştür.

    4)Interface segregation principle=> (Animals Örneği)
	Sorumlulukların hepsini tek bir interface'de tanımlamak yerine daha özelleştirilmiş birden fazla interface oluşturmayı tercih etmemizi söyleyen prensiptir.

	Nesneler asla ihtiyacı olmayan property/metot içeren interfaceleri implementeye etmeye zorlanmamalıdır. 
	
	Single responsibililty ve interface seggregation birbirine oldukça yakın ve yanı amaca hizmet eden prensiplerdir. Tek fark ise single responsibility sınıflar 	ile ilgenirken, interface seggregation interfaceler ile ilgilenir. 

    5)Dependency Inversion Principle=> (Notification Örneği)
	Bağımlılıklar olabildiğince az olmalıdır. Özellikle üst seviye sınıflar alt seviye sınıflara bağımlı olmamalıdır. 
	Yüksek seviye sınıflarda bir davranış değiştiğinde, alt seviye davranışların bu değişime uyum sağlaması gerekir. Ancak, düşük seviye sınıflarda bir davranış 	değiştiğinde, üst seviye sınıfların davranışında bir bozulma meydana gelmemelidir.
	DIP, iyi dizayn edilmiş sınıflar, yüksek oranda ayrıştırılmış bağımlılıklar (loosely coupled) ve tekrar kullanılabilir kod parçaları elde etmek için 	kullanabileceğimiz basit ama güçlü bir programlama prensibidir.Kötü bir tasarımda, yüksek seviye sınıfı doğrudan kullanır ve büyük ölçüde düşük seviye 	sınıflarına bağlıdır.
	
		
	






	
